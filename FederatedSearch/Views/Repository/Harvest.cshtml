@*     This file is part of OAI-PMH-.Net.
*  
*      OAI-PMH-.Net is free software: you can redistribute it and/or modify
*      it under the terms of the GNU General Public License as published by
*      the Free Software Foundation, either version 3 of the License, or
*      (at your option) any later version.
*  
*      OAI-PMH-.Net is distributed in the hope that it will be useful,
*      but WITHOUT ANY WARRANTY; without even the implied warranty of
*      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*      GNU General Public License for more details.
*  
*      You should have received a copy of the GNU General Public License
*      along with OAI-PMH-.Net.  If not, see <http://www.gnu.org/licenses/>.
*----------------------------------------------------------------------------*@

@model IList<FederatedSearch.Models.DataProviderProperties>
@using FederatedSearch.Controllers
@{
    ViewBag.Title = "Harvest";
    string baseLocalUrl = Common.GetBaseUrl(Html.ViewContext.RequestContext.HttpContext);
}

<h2>Harvest</h2>
<hr style="margin-top: 0px; padding-top: 0px;" />

@if (Model == null || Model.Count() < 1)
{
    <p>Dataprovider list is empty. @Html.ActionLink("Add provider", "DataProvider", new { id = "AddRepository" })</p>
    <br />
}

<div class="panel panel-default">
    <table id="dataProvidersTable" class="table table-striped table-condensed">
        <thead>
            <tr>
                <th>Data provider</th>
                <th>From</th>
                <th>Until</th>
                <th>Metadata Format</th>
                <th style="text-align: center;">Exclude</th>
                <th style="text-align: center;">Full harvest</th>
                <th style="text-align: center;">Harvest files</th>
                <th style="text-align: center;">Status</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.HiddenFor(modelItem => item.OAIDataProviderId)
                        <p style="font-size: 1.5em">@Html.DisplayFor(modelItem => item.RepositoryName)</p>
                        <div class="repoBaseUrl">@Html.DisplayFor(modelItem => item.BaseURL)</div>
                    </td>
                    <td>
                        <div class="btn-group" style="width: 100%;">
                            <div id="fromDateTime@(item.OAIDataProviderId)" class="input-append date btn oaiBtn btn-default" style="width:50%; padding-bottom:10px" @*style="padding: 6px 0px 9px 11px;border-radius: 4px;"*@>
                                <input data-format="yyyy-MM-dd T HH:mm:ss Z" type="text" name="From"
                                    style="display: none" />
                                <span class="add-on">
                                    <i class="glyphicon" data-time-icon="glyphicon glyphicon-time" data-date-icon="glyphicon glyphicon-calendar"></i>
                                </span>
                            </div>
                            <button type="button" style="width: 50%; background-color: #F0F0F0" class="btn btn-default" onclick="clearDateTimeString(this)">C</button>
                        </div>
                    </td>
                    <td>
                        <div class="btn-group" style="width: 100%;">
                            <div id="untilDateTime@(item.OAIDataProviderId)" class="input-append date btn oaiBtn btn-default" style="width:50%; padding-bottom:10px" @*style="padding: 6px 0px 9px 11px;border-radius: 4px;"*@>
                                <input data-format="yyyy-MM-dd T HH:mm:ss Z" type="text" name="Until"
                                    style="display: none" />
                                <span class="add-on">
                                    <i class="glyphicon" data-time-icon="glyphicon glyphicon-time" data-date-icon="glyphicon glyphicon-calendar"></i>
                                </span>
                            </div>
                            <button type="button" style="width: 50%; background-color: #F0F0F0" class="btn btn-default" onclick="clearDateTimeString(this)">C</button>
                        </div>
                    </td>
                    <td>
                        @Html.TextBoxFor(modelItem => item.MetadataPrefix, new { placeholder = "oai_dc", @class = "form-control" })
                    </td>
                    <td>
                        @Html.CheckBoxFor(modelItem => item.Exclude, new { @class = "form-control" })
                    </td>
                    <td>
                        @Html.CheckBoxFor(modelItem => item.FullHarvestDelete, new { @class = "form-control" })
                    </td>
                    <td>
                        @Html.CheckBoxFor(modelItem => item.HarvestDeleteFiles, new { @class = "form-control" })
                    </td>
                    @if (item.Stats != null)
                    {
                        <td style="text-align: center;" title="@Html.DisplayFor(modelItem => item.Stats.Message)">
                            @Html.DisplayFor(modelItem => item.Stats.Status)
                        </td>
                    }
                    else
                    {
                        <td style="text-align: center;">
                            @Html.Raw("/")
                        </td>
                    }
                    <td style="text-align: center;">
                        <input type="button" value="@(item.Stats == null ? "Start" :
                                                            (item.Stats.Status == "Starting" ||
                                                            item.Stats.Status == "Harvesting" ||
                                                            item.Stats.Status == "Retrying") ? "Stop" : "Start")" 
                                class="btn oaiBtn btn-default" onclick="StartStopHarvesting(this)"
                                data-repository-id="@item.OAIDataProviderId" style="width: 80px;" />
                        <div class="clear" style="padding-bottom: 8px;"></div>
                        <span style="color: red;"></span>
                    </td>
                </tr>
            }
        </tbody>
        @if (Model.Count > 1)
        {
            <tr></tr>
            <tfoot>
                <tr>
                    <td>
                        <p style="font-size: 1.5em">All data providers</p>
                    </td>
                    <td>
                        <div class="btn-group" style="width: 100%;">
                            <div id="fromDateTimeAll" class="input-append date btn oaiBtn btn-default" style="width:50%; padding-bottom:10px">
                                <input data-format="yyyy-MM-dd T HH:mm:ss Z" type="text" name="From"
                                    style="display: none" />
                                <span class="add-on">
                                    <i class="glyphicon" data-time-icon="glyphicon glyphicon-time" data-date-icon="glyphicon glyphicon-calendar"></i>
                                </span>
                            </div>
                            <button type="button" style="width: 50%; background-color: #F0F0F0" class="btn btn-default" onclick="clearDateTimeString(this)">C</button>
                        </div>
                    </td>
                    <td>
                        <div class="btn-group" style="width: 100%;">
                            <div id="untilDateTimeAll" class="input-append date btn oaiBtn btn-default" style="width: 50%; padding-bottom: 10px">
                                <input data-format="yyyy-MM-dd T HH:mm:ss Z" type="text" name="From"
                                    style="display: none" />
                                <span class="add-on">
                                    <i class="glyphicon" data-time-icon="glyphicon glyphicon-time" data-date-icon="glyphicon glyphicon-calendar"></i>
                                </span>
                            </div>
                            <button type="button" style="width: 50%; background-color: #F0F0F0" class="btn btn-default" onclick="clearDateTimeString(this)">C</button>
                        </div>
                    </td>
                    <td>
                        <input type="text" placeholder="oai_dc" class="form-control" oninput="changeMetaFormatForAll(this)" />
                    </td>
                    <td>
                        <input type="checkbox" class="form-control" onchange="changeAllCheckboxesInColumn(this)" />
                    </td>
                    <td>
                        <input type="checkbox" class="form-control" onchange="changeAllCheckboxesInColumn(this)" />
                    </td>
                    <td>
                        <input type="checkbox" class="form-control" onchange="changeAllCheckboxesInColumn(this)" />
                    </td>
                    <td></td>
                    <td style="text-align: center;">
                        <input id="startStopHarvestingAllBtn" type="button" value="Start All" class="btn oaiBtn btn-default"
                            onclick="StartStopHarvesting(this)" style="width: 80px;" />
                    </td>
                </tr>
            </tfoot>
        }
    </table>
</div>

<script type="text/javascript">

    $(document).ready(function () {
        var startStatRequesting = false;
        var statusColumnIndex = $('#dataProvidersTable > thead > tr > th:contains("Status")').index();
        $('#dataProvidersTable > tbody > tr > td:eq(' + statusColumnIndex + ')').each(function () {
            if ($(this).text().trim() == 'Starting' || $(this).text().trim() == 'Harvesting' || $(this).text().trim() == 'Retrying') {
                startHarvestStatInterval();
                setButtonToStop($(this).siblings().last().children().first());
                if (startStopAllBtn.val() == "Start All") {
                    setButtonToStopAll(startStopAllBtn);
                }
            }
        });
        $('#dataProvidersTable > tbody > tr > td > div > div[id^="fromDateTime"], div[id^="untilDateTime"]').each(function () {
            $(this).datetimepicker({
                language: 'en',
                pick12HourFormat: false
            }).on('changeDate', function (e) { dateTimeOnInput($(this)); });
        });
        $('#dataProvidersTable > tfoot > tr > td > div > div[id^="fromDateTime"], div[id^="untilDateTime"]').each(function () {
            $(this).datetimepicker({
                language: 'en',
                pick12HourFormat: false
            }).on('changeDate', function (e) { dateTimeOnInput($(this)); });
        });
    });

    function dateTimeOnInput(dtp) {
        var dateTimeVal = dtp.children('input').val();
        if (dtp.prop('id') == 'fromDateTimeAll') {
            $('#dataProvidersTable > tbody > tr > td > div > div[id^="fromDateTime"]').each(function () {
                $(this).data('datetimepicker').setValue(dateTimeVal);
                $(this).animate({
                    backgroundColor: '#428bca',
                    color: '#FFF'
                }, 500);
            });
        }
        else if (dtp.prop('id') == 'untilDateTimeAll') {
            $('#dataProvidersTable > tbody > tr > td > div > div[id^="untilDateTime"]').each(function () {
                $(this).data('datetimepicker').setValue(dateTimeVal);
                $(this).animate({
                    backgroundColor: '#428bca',
                    color: '#FFF'
                }, 500);
            });
        }

        if (!dateTimeVal || dateTimeVal == '') {
            dtp.animate({
                backgroundColor: '#F0F0F0',
                color: '#000'
            }, 500);
        }
        else {
            dtp.animate({
                backgroundColor: '#428bca',
                color: '#FFF'
            }, 500);
        }
    }

    function clearDateTimeString(btn) {
        var dtp = $(btn).siblings('div');
        if (dtp.prop('id') == 'fromDateTimeAll') {
            $('#dataProvidersTable > tbody > tr > td > div > div[id^="fromDateTime"]').each(function () {
                $(this).data('datetimepicker').setValue(0);
                $(this).animate({
                    backgroundColor: '#F0F0F0',
                    color: '#000'
                }, 500);
            });
        }
        else if (dtp.prop('id') == 'untilDateTimeAll') {
            $('#dataProvidersTable > tbody > tr > td > div > div[id^="untilDateTime"]').each(function () {
                $(this).data('datetimepicker').setValue(0);
                $(this).animate({
                    backgroundColor: '#F0F0F0',
                    color: '#000'
                }, 500);
            });
        }

        dtp.data('datetimepicker').setValue(0);
        dtp.animate({
            backgroundColor: '#F0F0F0',
            color: '#000'
        }, 500);
    }

    function changeMetaFormatForAll(textBox) {
        var tBox = $(textBox);
        $('#dataProvidersTable > tbody > tr > td:nth-child(' + (tBox.parent('td').index() + 1) + ')').children('input[type="text"]').val(tBox.val());
    }

    function changeAllCheckboxesInColumn(checkBox) {
        var cBox = $(checkBox);
        $('#dataProvidersTable > tbody > tr > td:nth-child(' + (cBox.parent('td').index() + 1) + ')')
            .children('input[type="checkbox"]').prop("checked", cBox.is(':checked'));
    }

    var startStopAllBtn = $("#startStopHarvestingAllBtn");

    var harvestStatIntervalHandle;
    var harvestStatFailureLimit;
    var harvestStatFailureCount;

    function startHarvestStatInterval() {
        if (!harvestStatIntervalHandle) {
            harvestStatFailureLimit = 10;
            harvestStatFailureCount = 0;
            harvestStatIntervalHandle = window.setInterval(function () {
                jsonRequest("@baseLocalUrl/Repository/Harvest/Status").done(successStatCallback);
            }, 2000);
                }
            }

            function stopHarvestStatRetrieval() {
                clearInterval(harvestStatIntervalHandle);
                harvestStatFailureCount = null;
                harvestStatIntervalHandle = null
            }

            function setButtonToStop(button) {
                setButtonToWorkingState(button, 'Stop');
            }
            function setButtonToStopAll(button) {
                setButtonToWorkingState(button, 'Stop All');
            }
            function setButtonToWorkingState(button, value) {
                var currentButton = $(button);
                currentButton.val(value);
                currentButton.animate({
                    backgroundColor: '#428BCA',
                    color: '#FFF'
                }, 500);
            }
            function setButtonToStart(button) {
                setButtonToIdleState(button, 'Start');
            }
            function setButtonToStartAll(button) {
                setButtonToIdleState(button, 'Start All');
            }
            function setButtonToIdleState(button, value) {
                var currentButton = $(button);
                currentButton.val(value);
                currentButton.animate({
                    backgroundColor: '#F0F0F0',
                    color: '#000'
                }, 500);
            }

            function successStatCallback(data) {
                switch (data.status) {
                    case "ok":
                        var statusColumnIndex = $('#dataProvidersTable > thead > tr > th:contains("Status")').index();
                        $.each(data.result, function (i, stat) {
                            var cells = getDataProviderTableCells(stat.OAIDataProviderId);
                            if (cells.length > 0) {
                                var tmpBtn = $(cells).last().children().first();
                                if ((stat.Status == "Starting" || stat.Status == "Harvesting" || stat.Status == "Retrying") &&
                                    tmpBtn.val() != "Stop") {
                                    setButtonToStop(tmpBtn);
                                }
                                if (stat.Status != "Starting" && stat.Status != "Harvesting" && stat.Status != "Retrying") {
                                    jsonRequest("@baseLocalUrl/Repository/Harvest/Clear",
                                        JSON.stringify({ dataProviderId: stat.OAIDataProviderId }));
                            stat.Status = "Completed";
                            setButtonToStart(tmpBtn);
                        }
                        // Update status
                        if (statusColumnIndex != -1) {
                            var statusCell = $(cells[statusColumnIndex]);
                            statusCell.html(stat.Status);
                            if (stat.RatioDone > 0 || stat.RatioAll > 0) {
                                statusCell.append("<br />" + stat.RatioDone + " / " + stat.RatioAll);
                            }
                            statusCell.prop("title", stat.Message ? stat.Message : "");
                        }
                    }
                });

                harvestStatFailureCount = 0;

                var stopButtons = $('#dataProvidersTable > tbody > tr > td > input[type="button"][value="Stop"]');
                if (data.result.length == 0 || stopButtons.length == 0) {
                    if (startStopAllBtn.val() == "Stop All") {
                        setButtonToStartAll(startStopAllBtn);
                    }
                    stopHarvestStatRetrieval();
                }
                break;
            case "failure":
                harvestStatFailureCount += 1;
                if (harvestStatFailureCount >= harvestStatFailureLimit) {
                    stopHarvestStatRetrieval();
                }
                break;
            default: break;
        }
    }


    function successStartStopCallback(data) {
        var tdChildren = getDataProviderTableCells(data.dataProviderId).last().children();
        var btnObj = tdChildren.siblings('input[type="button"]').first();
        switch (data.status) {
            case "ok":
                tdChildren.siblings('span').first().text('').hide(200);
                startHarvestStatInterval()
                switch (btnObj.val()) {
                    case "Start":
                        setButtonToStop(btnObj);
                        if (startStopAllBtn.val() == "Start All") {
                            setButtonToStopAll(startStopAllBtn);
                        }
                        successStatCallback(data);
                        break;
                    case "Stop":
                        setButtonToStart(btnObj);
                        break;
                    default: break;
                }
                break;
            case "failure":
                tdChildren.siblings('span').first().text("Failed to " + btnObj.val().toLowerCase() + "!").show(200);
                break;
            default: break;
        }
    }

    function successStartStopCallbackAll(data) {
        switch (data.status) {
            case "ok":
                switch (data.operation) {
                    case "startAll":
                        setButtonToStopAll(startStopAllBtn);
                        successStatCallback(data);
                        startHarvestStatInterval();
                        break;
                    case "stopAll":
                        setButtonToStartAll(startStopAllBtn);
                    default: break;
                }
                break;
            case "failure":
                break;
            default: break;
        }
    }

    function StartStopHarvesting(startStopBtn) {
        var currentBtn = $(startStopBtn);
        var id = currentBtn.data('repository-id');

        switch (currentBtn.val()) {
            case "Start":
                var dpSettings = getDataProviderSettings(currentBtn.parent('td').parent('tr'));
                var data = "[" + JSON.stringify(dpSettings) + "]";
                jsonRequest(
                    "@baseLocalUrl/Repository/Harvest/Start",
                    data
                ).done(successStartStopCallback);
                    break;
                case "Stop":
                    jsonRequest(
                        "@baseLocalUrl/Repository/Harvest/Stop",
                    JSON.stringify({ dataProviderId: id })
                ).done(successStartStopCallback);
                    break;
                case "Start All":
                    var dps = [];
                    $("#dataProvidersTable > tbody > tr").each(function () {
                        var dpSettings = getDataProviderSettings(this);
                        if (!dpSettings.Exclude) {
                            dps.push(dpSettings);
                        }
                    });
                    var data = JSON.stringify(dps);
                    jsonRequest(
                        "@baseLocalUrl/Repository/Harvest/StartAll",
                    data
                ).done(successStartStopCallbackAll);
                    break;
                case "Stop All":
                    jsonRequest(
                        "@baseLocalUrl/Repository/Harvest/StopAll",
                    data
                ).done(successStartStopCallbackAll);
                    break;
                default: break;
            }
        }

</script>
<script src="@Url.Content("~/Scripts/CommonOAI.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery-ui-1.8.24.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/bootstrap/bootstrap-datetimepicker.min.js")" type="text/javascript"></script>
@Styles.Render("~/Content/bootstrap/bootstrap-datetimepicker.min.css")
@Styles.Render("//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css")
